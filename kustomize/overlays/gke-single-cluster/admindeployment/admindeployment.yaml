apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteadmin
  namespace: flyte
spec:
  template:
    spec:
      volumes:
      - name: resource-templates 
        configMap:
          name: clusterresource-template 
      initContainers:
      - name: check-db-ready
        image: postgres:10.1
        command: ['sh', '-c',
          'until pg_isready -h postgres -p 5432;
          do echo waiting for database; sleep 2; done;']
      - name: run-migrations
        image: docker.io/lyft/flyteadmin:v0.1.4
        imagePullPolicy: IfNotPresent
        command: ["flyteadmin", "--logtostderr", "--config", "/etc/flyte/config/flyteadmin_config.yaml",
                  "migrate", "run"]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
      - name: seed-projects
        image: docker.io/lyft/flyteadmin:v0.1.4
        imagePullPolicy: IfNotPresent
        command: ["flyteadmin", "--logtostderr", "--config", "/etc/flyte/config/flyteadmin_config.yaml",
                  "migrate", "seed-projects", "flytesnacks", "flytetester"]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
      - name: sync-cluster-resources
        image: docker.io/lyft/flyteadmin:v0.1.4
        imagePullPolicy: IfNotPresent
        command: ["flyteadmin", "--logtostderr", "--config", "/etc/flyte/config/flyteadmin_config.yaml", "clusterresource", "sync"]
        volumeMounts:
        - name: resource-templates
          mountPath: /etc/flyte/clusterresource/templates
        - name: config-volume
          mountPath: /etc/flyte/config
      containers:
      - name: flyteadmin
        resources:
          limits:
            memory: "200Mi"
            cpu: "0.1"
            ephemeral-storage: "100Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: flyteadmin
  namespace: flyte
spec:
  ports:
  - name: redoc
    protocol: TCP
    port: 87
    targetPort: 8087
