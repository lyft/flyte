apiVersion: v1
kind: Namespace
metadata:
  name: flyte
spec:
  finalizers:
  - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: Namespace
metadata:
  name: heptio-contour
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
    - fly
    singular: flyteworkflow
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: 'FlyteWorkflow: represents one Execution Workflow object'
      properties:
        acceptedAt: {}
        activeDeadlineSeconds:
          description: StartTime before the system will actively try to mark it failed
            and kill associated containers. Value must be a positive integer.
          format: int64
          type: integer
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        executionId:
          type: object
        inputs:
          type: object
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata: {}
        node-defaults:
          properties:
            interruptible:
              description: Default behaviour for Interruptible for nodes unless explicitly
                set at the node level.
              type: boolean
          type: object
        serviceAccountName:
          description: 'ServiceAccountName is the name of the ServiceAccount to use
            to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/'
          type: string
        spec:
          description: WorkflowSpec is the spec for the actual Flyte Workflow (DAG)
          properties:
            connections:
              properties:
                downstreamEdges:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  type: object
                upstreamEdges:
                  additionalProperties:
                    items:
                      type: string
                    type: array
                  type: object
              type: object
            id:
              type: string
            nodes:
              additionalProperties: {}
              type: object
            onFailure:
              properties:
                activeDeadline:
                  description: StartTime before the system will actively try to mark
                    it failed and kill associated containers. Value must be a positive
                    integer. This includes time spent waiting in the queue.
                affinity: {}
                branch:
                  properties:
                    else:
                      type: string
                    elseFail:
                      type: object
                    elseIf:
                      items: {}
                      type: array
                    if:
                      properties:
                        condition:
                          type: object
                        then:
                          type: string
                      required:
                      - condition
                      - then
                      type: object
                  required:
                  - if
                  type: object
                config: {}
                executionDeadline: {}
                hostname:
                  description: Specifies the hostname of the Pod If not specified,
                    the pod's hostname will be set to a system-defined value.
                  type: string
                id:
                  type: string
                imagePullSecrets:
                  description: 'ImagePullSecrets is an optional list of references
                    to secrets in the same namespace to use for pulling any of the
                    images used by this PodSpec. If specified, these secrets will
                    be passed to individual puller implementations for them to use.
                    For example, in the case of docker, only DockerConfig type secrets
                    are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
                  items: {}
                  type: array
                inputBindings:
                  items:
                    type: object
                  type: array
                interruptible:
                  description: The value set to True means task is OK with getting
                    interrupted
                  type: boolean
                kind:
                  type: string
                outputAlias:
                  items:
                    properties:
                      alias:
                        description: A workflow-level unique alias that downstream
                          nodes can refer to in their input.
                        type: string
                      var:
                        description: Must match one of the output variable names on
                          a node.
                        type: string
                    type: object
                  type: array
                resources: {}
                retry:
                  description: Strategy to be used to Retry a node that is in RetryableFailure
                    state
                  properties:
                    minAttempts:
                      description: MinAttempts implies the atleast n attempts to try
                        this node before giving up. The atleast here is because we
                        may fail to write the attempt information and end up retrying
                        again. Also `0` and `1` both mean atleast one attempt will
                        be done. 0 is a degenerate case.
                      format: int32
                      type: integer
                  required:
                  - minAttempts
                  type: object
                schedulerName:
                  description: If specified, the pod will be dispatched by specified
                    scheduler. If not specified, the pod will be dispatched by default
                    scheduler.
                  type: string
                securityContext: {}
                subdomain:
                  description: If specified, the fully qualified Pod hostname will
                    be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
                    If not specified, the pod will not have a domainname at all.
                  type: string
                task:
                  type: string
                tolerations:
                  description: If specified, the pod's tolerations.
                  items: {}
                  type: array
                workflow:
                  properties:
                    launchPlanRefId:
                      type: object
                    subWorkflowRef:
                      description: 'We currently want the SubWorkflow to be completely
                        contained in the node. this is because We use the node status
                        to store the information of the execution. Important Note:
                        This may cause a bloat in case we use the same SubWorkflow
                        in multiple nodes. The recommended technique for that is to
                        use launch plan refs. This is because we will end up executing
                        the launch plan refs as disparate executions in Flyte propeller.
                        This is potentially better as it prevents us from hitting
                        the storage limit in etcd Workflow *WorkflowSpec `json:"workflow,omitempty"`'
                      type: string
                  type: object
              required:
              - id
              - kind
              type: object
            outputBindings:
              description: Defines the data links used to construct the final outputs
                of the workflow. Bindings will typically refer to specific outputs
                of a subset of the nodes executed in the Workflow. When executing
                the end-node, the execution engine will traverse these bindings and
                assemble the final set of outputs of the workflow.
              items: {}
              type: array
            outputs:
              type: object
          required:
          - id
          - nodes
          - connections
          type: object
        status:
          properties:
            dataDir:
              type: string
            error:
              description: Wrapper around core.Execution error. Execution Error has
                a protobuf enum and hence needs to be wrapped by custom marshaller
              type: object
            failedAttempts:
              description: Number of Attempts completed with rounds resulting in error.
                this is used to cap out poison pill workflows that spin in an error
                loop. The value should be set at the global level and will be enforced.
                At the end of the retries the workflow will fail
              format: int64
              type: integer
            lastUpdatedAt: {}
            message:
              type: string
            nodeStatus:
              additionalProperties:
                properties:
                  attempts:
                    format: int64
                    type: integer
                  branchStatus:
                    properties:
                      finalNodeId:
                        type: string
                      phase:
                        format: int32
                        type: integer
                    required:
                    - phase
                    - finalNodeId
                    type: object
                  cached:
                    type: boolean
                  dynamicNodeStatus:
                    properties:
                      error: {}
                      phase:
                        format: int32
                        type: integer
                      reason:
                        type: string
                    required:
                    - phase
                    type: object
                  error:
                    description: In case of Failing/Failed Phase, an execution error
                      can be optionally associated with the Node
                  laStartedAt: {}
                  lastUpdatedAt: {}
                  message:
                    type: string
                  parentNode:
                    description: This is useful only for branch nodes. If this is
                      set, then it can be used to determine if execution can proceed
                    type: string
                  phase:
                    format: int32
                    type: integer
                  queuedAt: {}
                  startedAt: {}
                  stoppedAt: {}
                  subNodeStatus:
                    additionalProperties: {}
                    type: object
                  systemFailures:
                    format: int64
                    type: integer
                  workflowNodeStatus:
                    properties:
                      executionError: {}
                      phase:
                        format: int32
                        type: integer
                    required:
                    - phase
                    - executionError
                    type: object
                required:
                - phase
                - attempts
                - cached
                type: object
              type: object
            outputRef:
              type: string
            phase:
              format: int32
              type: integer
            startedAt: {}
            stoppedAt: {}
          required:
          - phase
          type: object
        subWorkflows:
          additionalProperties: {}
          type: object
        tasks:
          additionalProperties:
            type: object
          type: object
      required:
      - spec
      - executionId
      - tasks
      type: object
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    component: ingressroute
  name: ingressroutes.contour.heptio.com
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.virtualhost.fqdn
    description: Fully qualified domain name
    name: FQDN
    type: string
  - JSONPath: .spec.virtualhost.tls.secretName
    description: Secret with TLS credentials
    name: TLS Secret
    type: string
  - JSONPath: .spec.routes[0].match
    description: First routes defined
    name: First route
    type: string
  - JSONPath: .status.currentStatus
    description: The current status of the IngressRoute
    name: Status
    type: string
  - JSONPath: .status.description
    description: Description of the current status
    name: Status Description
    type: string
  group: contour.heptio.com
  names:
    kind: IngressRoute
    plural: ingressroutes
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            healthCheck:
              properties:
                healthyThresholdCount:
                  type: integer
                intervalSeconds:
                  type: integer
                path:
                  pattern: ^\/.*$
                  type: string
                timeoutSeconds:
                  type: integer
                unhealthyThresholdCount:
                  type: integer
              required:
              - path
              type: object
            routes:
              items:
                properties:
                  delegate:
                    properties:
                      name:
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                        type: string
                      namespace:
                        pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                        type: string
                    required:
                    - name
                    type: object
                  match:
                    pattern: ^\/.*$
                    type: string
                  services:
                    items:
                      properties:
                        healthCheck:
                          properties:
                            healthyThresholdCount:
                              type: integer
                            intervalSeconds:
                              type: integer
                            path:
                              pattern: ^\/.*$
                              type: string
                            timeoutSeconds:
                              type: integer
                            unhealthyThresholdCount:
                              type: integer
                          required:
                          - path
                          type: object
                        name:
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                          type: string
                        port:
                          type: integer
                        strategy:
                          enum:
                          - RoundRobin
                          - WeightedLeastRequest
                          - Random
                          - RingHash
                          - Maglev
                          type: string
                        weight:
                          type: integer
                      required:
                      - name
                      - port
                      type: object
                    type: array
                required:
                - match
              type: array
            strategy:
              enum:
              - RoundRobin
              - LeastRequest
              - Random
              - RingHash
              - Maglev
              type: string
            virtualhost:
              properties:
                aliases:
                  items:
                    pattern: ^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$
                    type: string
                  type: array
                fqdn:
                  pattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-z]{2,}$
                  type: string
          required:
          - routes
  version: v1beta1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: contour
  namespace: heptio-contour
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyteadmin
  namespace: flyte
rules:
- apiGroups:
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources:
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flytepropeller
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: contour
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - contour.heptio.com
  resources:
  - ingressroutes
  verbs:
  - get
  - list
  - watch
  - put
  - post
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flyteadmin-binding
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flytepropeller
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: contour
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: contour
subjects:
- kind: ServiceAccount
  name: contour
  namespace: heptio-contour
---
apiVersion: v1
data:
  aa_namespace.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
  ab_project-resource-quota.yaml: "apiVersion: v1\nkind: ResourceQuota\nmetadata:\n
    \ name: project-quota\n  namespace: {{ namespace }} \nspec:\n  hard:\n    limits.cpu:
    {{ projectQuotaCpu }} \n    limits.memory: {{ projectQuotaMemory }}\n\n"
kind: ConfigMap
metadata:
  name: clusterresource-template-m2kccc465f
  namespace: flyte
---
apiVersion: v1
data:
  flyteadmin_config.yaml: |
    logger:
      show-source: true
      level: 5
    server:
      httpPort: 8088
      grpcPort: 8089
      security:
        secure: false
        useAuth: false
        allowCors: false
    flyteadmin:
      roleNameKey: "iam.amazonaws.com/role"
      profilerPort: 10254
      metricsScope: "flyte:"
      metadataStoragePrefix:
        - "metadata"
        - "admin"
      testing:
        host: http://flyteadmin
    database:
      port: 5432
      username: postgres
      host: postgres
      dbname: postgres
      options: sslmode=disable
    remoteData:
      region: "us-east-1"
      scheme: "local"
      signedUrls:
        durationMinutes: 3
    storage:
      type: minio
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      container: "my-s3-bucket"
    task_resources:
      defaults:
        cpu: 100m
        memory: 100Mi
        storage: 5Mi
      limits:
        cpu: 2
        memory: 2G
        storage: 20Mi
    task_type_whitelist:
      spark:
        - project: flytekit
        - project: flytetester
    domains:
      - id: development
        name: development
      - id: staging
        name: staging
      - id: production
        name: production
    cluster_resources:
      templatePath: "/etc/flyte/clusterresource/templates"
      customData:
        production:
          - projectQuotaCpu:
              value: "5"
          - projectQuotaMemory:
              value: "4000Mi"
        staging:
          - projectQuotaCpu:
              value: "1"
          - projectQuotaMemory:
              value: "2000Mi"
        development:
          - projectQuotaCpu:
              value: "1"
          - projectQuotaMemory:
              value: "2000Mi"
      refresh: 5m
kind: ConfigMap
metadata:
  name: flyte-admin-config-dtcg25hb22
  namespace: flyte
---
apiVersion: v1
data:
  config.yaml: |
    plugins:
      logs:
        kubernetes-enabled: true
        kubernetes-url: "http://localhost:30082"
      k8s:
        default-env-vars:
          - FLYTE_AWS_ENDPOINT: "http://minio.flyte:9000"
          - FLYTE_AWS_ACCESS_KEY_ID: minio
          - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
kind: ConfigMap
metadata:
  name: flyte-plugin-config-b525btf774
  namespace: flyte
---
apiVersion: v1
data:
  config.yaml: |
    propeller:
      metadata-prefix: metadata/propeller
      workers: 4
      max-workflow-retries: 30
      workflow-reeval-duration: 30s
      downstream-eval-duration: 30s
      limit-namespace: "all"
      prof-port: 10254
      metrics-prefix: flyte
      enable-admin-launcher: true
      leader-election:
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        enabled: true
        lease-duration: 15s
        renew-deadline: 10s
        retry-period: 2s
      queue:
        type: batch
        batching-interval: 2s
        batch-size: -1
        queue:
          type: bucket
          rate: 10
          capacity: 100
        sub-queue:
          type: bucket
          rate: 10
          capacity: 100
    logger:
      show-source: true
      level: 5
    storage:
      connection:
        access-key: minio
        auth-type: accesskey
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
        secret-key: miniostorage
      type: minio
      container: my-s3-bucket
    event:
      type: admin
      rate: 500
      capacity: 1000
    admin:
      endpoint: flyteadmin:81
      insecure: true
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - k8s-array
kind: ConfigMap
metadata:
  name: flyte-propeller-config-hd7h56fg47
  namespace: flyte
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    contour.heptio.com/upstream-protocol.h2c: grpc
  name: flyteadmin
  namespace: flyte
spec:
  ports:
  - name: redoc
    port: 87
    protocol: TCP
    targetPort: 8087
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 81
    protocol: TCP
    targetPort: 8089
  selector:
    app: flyteadmin
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: flyte
spec:
  externalName: minio
  ports:
  - port: 9000
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: flyte
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis-resource-manager
  name: redis-resource-manager
  namespace: flyte
spec:
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: redis
  selector:
    app: redis-resource-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: contour
  name: contour
  namespace: heptio-contour
spec:
  ports:
  - nodePort: 30081
    port: 80
    protocol: TCP
  selector:
    app: contour
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyteadmin
  name: flyteadmin
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flyteadmin
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flyteadmin
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/version: 0.2.8
    spec:
      containers:
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - serve
        image: docker.io/lyft/flyteadmin:v0.2.8
        imagePullPolicy: IfNotPresent
        name: flyteadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        resources:
          limits:
            cpu: "0.1"
            ephemeral-storage: 100Mi
            memory: 200Mi
        volumeMounts:
        - mountPath: /srv/flyte
          name: shared-data
        - mountPath: /etc/flyte/config
          name: config-volume
      - command:
        - sh
        - -c
        - ln -s /usr/share/nginx/html /usr/share/nginx/html/openapi && sh /usr/local/bin/docker-run.sh
        env:
        - name: PAGE_TITLE
          value: Flyte Admin OpenAPI
        - name: SPEC_URL
          value: /api/v1/openapi
        - name: PORT
          value: "8087"
        image: docker.io/redocly/redoc
        imagePullPolicy: IfNotPresent
        name: redoc
        ports:
        - containerPort: 8087
        resources:
          limits:
            cpu: "0.1"
            memory: 200Mi
      initContainers:
      - command:
        - sh
        - -c
        - until pg_isready -h postgres -p 5432; do echo waiting for database; sleep
          2; done;
        image: postgres:10.1
        name: check-db-ready
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - migrate
        - run
        image: docker.io/lyft/flyteadmin:v0.2.8
        imagePullPolicy: IfNotPresent
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - migrate
        - seed-projects
        - flytesnacks
        - flytetester
        - flyteexamples
        image: docker.io/lyft/flyteadmin:v0.2.8
        imagePullPolicy: IfNotPresent
        name: seed-projects
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
      - command:
        - flyteadmin
        - --logtostderr
        - --config
        - /etc/flyte/config/flyteadmin_config.yaml
        - clusterresource
        - sync
        image: docker.io/lyft/flyteadmin:v0.2.8
        imagePullPolicy: IfNotPresent
        name: sync-cluster-resources
        volumeMounts:
        - mountPath: /etc/flyte/clusterresource/templates
          name: resource-templates
        - mountPath: /etc/flyte/config
          name: config-volume
      serviceAccountName: flyteadmin
      volumes:
      - configMap:
          name: clusterresource-template-m2kccc465f
        name: resource-templates
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: flyte-admin-config-dtcg25hb22
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flytepropeller
  name: flytepropeller
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: flytepropeller
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flytepropeller
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/version: 0.2.45
    spec:
      containers:
      - args:
        - --config
        - /etc/flyte/config*/config.yaml
        command:
        - flytepropeller
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/lyft/flytepropeller:v0.2.45
        imagePullPolicy: IfNotPresent
        name: flytepropeller
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: "0.1"
            ephemeral-storage: 100Mi
            memory: 100Mi
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/flyte/config-plugin
          name: plugin-config-volume
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config-hd7h56fg47
        name: config-volume
      - configMap:
          name: flyte-plugin-config-b525btf774
        name: plugin-config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - args:
        - server
        - /data
        env:
        - name: MINIO_ACCESS_KEY
          value: minio
        - name: MINIO_SECRET_KEY
          value: miniostorage
        image: minio/minio:RELEASE.2019-06-04T01-15-58Z
        name: minio
        ports:
        - containerPort: 9000
          name: minio
        volumeMounts:
        - mountPath: /data
          name: minio-storage
      volumes:
      - emptyDir: {}
        name: minio-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - image: postgres:10.1
        name: postgres
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
      volumes:
      - emptyDir: {}
        name: postgres-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: contour
  name: contour
  namespace: heptio-contour
spec:
  replicas: 1
  selector:
    matchLabels:
      app: contour
  template:
    metadata:
      annotations:
        prometheus.io/format: prometheus
        prometheus.io/path: /stats
        prometheus.io/port: "8002"
        prometheus.io/scrape: "true"
      labels:
        app: contour
    spec:
      containers:
      - args:
        - -c
        - /config/contour.yaml
        - --service-cluster
        - cluster0
        - --service-node
        - node0
        command:
        - envoy
        image: docker.io/envoyproxy/envoy-alpine:v1.6.0
        name: envoy-envoyingressv1
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8002
          name: statsd
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /config
          name: contour-config
      - args:
        - serve
        - --incluster
        - --envoy-http-port=80
        - --debug-http-port=6069
        command:
        - contour
        image: gcr.io/heptio-images/contour:v0.6.1
        imagePullPolicy: Always
        name: contour-unknown
        ports:
        - containerPort: 8000
          name: contour
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - bootstrap
        - /config/contour.yaml
        - --statsd-enabled
        command:
        - contour
        image: gcr.io/heptio-images/contour:v0.6.1
        imagePullPolicy: Always
        name: envoy-initconfig
        volumeMounts:
        - mountPath: /config
          name: contour-config
      serviceAccountName: contour
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: contour-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-resource-manager
  serviceName: redis-resource-manager
  template:
    metadata:
      labels:
        app: redis-resource-manager
    spec:
      containers:
      - env:
        - name: REDIS_PASSWORD
          value: mypassword
        image: docker.io/bitnami/redis:4.0.2-r1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: redis-resource-manager
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - mountPath: /bitnami
          name: redis-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - emptyDir: {}
        name: redis-data
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: syncresources
  namespace: flyte
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - flyteadmin
            - --logtostderr
            - --config
            - /etc/flyte/config/flyteadmin_config.yaml
            - clusterresource
            - sync
            image: docker.io/lyft/flyteadmin:v0.2.8
            imagePullPolicy: IfNotPresent
            name: sync-cluster-resources
            volumeMounts:
            - mountPath: /etc/flyte/clusterresource/templates
              name: resource-templates
            - mountPath: /etc/flyte/config
              name: config-volume
          restartPolicy: OnFailure
          serviceAccountName: flyteadmin
          volumes:
          - configMap:
              name: clusterresource-template-m2kccc465f
            name: resource-templates
          - configMap:
              name: flyte-admin-config-dtcg25hb22
            name: config-volume
  schedule: '*/1 * * * *'
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  name: flytesystem
  namespace: flyte
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: flyteconsole
          servicePort: 80
        path: /console
      - backend:
          serviceName: flyteconsole
          servicePort: 80
        path: /__webpack_hmr
      - backend:
          serviceName: flyteadmin
          servicePort: 80
        path: /api
      - backend:
          serviceName: flyteadmin
          servicePort: 80
        path: /healthcheck
      - backend:
          serviceName: flyteadmin
          servicePort: 80
        path: /v1
      - backend:
          serviceName: flyteadmin
          servicePort: 81
        path: /flyteidl.service.AdminService
      - backend:
          serviceName: flyteadmin
          servicePort: 87
        path: /openapi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  name: minio
  namespace: flyte
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: minio
          servicePort: 9000
        path: /minio
