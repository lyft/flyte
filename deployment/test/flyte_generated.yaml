apiVersion: v1
kind: Namespace
metadata:
  name: flyte
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
    - fly
    singular: flyteworkflow
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datacatalog
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-pod-webhook
  namespace: flyte
rules:
- apiGroups:
  - '*'
  resources:
  - mutatingwebhookconfigurations
  - secrets
  - pods
  verbs:
  - get
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyteadmin
  namespace: flyte
rules:
- apiGroups:
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources:
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flytepropeller
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-pod-webhook
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-pod-webhook
subjects:
- kind: ServiceAccount
  name: flyte-pod-webhook
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flyteadmin-binding
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: flytepropeller
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: flyte
---
apiVersion: v1
data:
  aa_namespace.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
  ab_project-resource-quota.yaml: "apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: project-quota\n  namespace: {{ namespace }} \nspec:\n  hard:\n    limits.cpu: {{ projectQuotaCpu }} \n    limits.memory: {{ projectQuotaMemory }}\n\n"
  ac_project-copilot-dataconfig.yaml: |
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: flyte-data-config
      namespace: {{ namespace }}
    data:
      config.yaml: |
        storage:
          connection:
            access-key: minio
            auth-type: accesskey
            disable-ssl: true
            endpoint: http://minio.flyte.svc.cluster.local:9000
            region: us-east-1
            secret-key: miniostorage
          type: minio
          container: my-s3-bucket
          enable-multicontainer: true
kind: ConfigMap
metadata:
  name: clusterresource-template-dtg8ff28mt
  namespace: flyte
---
apiVersion: v1
data:
  db.yaml: |
    database:
      port: 5432
      username: postgres
      host: postgres
      dbname: datacatalog
      options: sslmode=disable
  logger.yaml: |
    logger:
      show-source: true
      level: 2
  server.yaml: |
    datacatalog:
      storage-prefix: metadata/datacatalog
      metrics-scope: "datacatalog"
      profiler-port: 10254
    application:
      grpcPort: 8089
  storage.yaml: |+
    storage:
      type: minio
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      container: "my-s3-bucket"

kind: ConfigMap
metadata:
  name: datacatalog-config-64k8dg9gck
  namespace: flyte
---
apiVersion: v1
data:
  cluster_resources.yaml: |
    cluster_resources:
      templatePath: "/etc/flyte/clusterresource/templates"
      customData:
        production:
          - projectQuotaCpu:
              value: "5"
          - projectQuotaMemory:
              value: "4000Mi"
        staging:
          - projectQuotaCpu:
              value: "2"
          - projectQuotaMemory:
              value: "3000Mi"
        development:
          - projectQuotaCpu:
              value: "4"
          - projectQuotaMemory:
              value: "3000Mi"
      refresh: 5m
  db.yaml: |
    database:
      port: 5432
      username: postgres
      host: postgres
      dbname: postgres
      options: sslmode=disable
  domain.yaml: |
    domains:
      - id: development
        name: development
      - id: staging
        name: staging
      - id: production
        name: production
  logger.yaml: |
    logger:
      show-source: true
      level: 2
  remote_data.yaml: |
    remoteData:
      region: "us-east-1"
      scheme: "local"
      signedUrls:
        durationMinutes: 3
  server.yaml: |
    server:
      httpPort: 8088
      grpcPort: 8089
      security:
        secure: false
        useAuth: false
        allowCors: true
        allowedOrigins:
          # Accepting all domains for Sandbox installation
          - "*"
        allowedHeaders:
          - "Content-Type"
    flyteadmin:
      roleNameKey: "iam.amazonaws.com/role"
      profilerPort: 10254
      metricsScope: "flyte:"
      metadataStoragePrefix:
        - "metadata"
        - "admin"
      eventVersion: 1
      testing:
        host: http://flyteadmin
  storage.yaml: |+
    storage:
      type: minio
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      container: "my-s3-bucket"

  task_resource_defaults.yaml: |
    task_resources:
      defaults:
        cpu: 100m
        memory: 100Mi
        storage: 5Mi
      limits:
        cpu: 2
        memory: 8Gi
        storage: 20Mi
        gpu: 1
kind: ConfigMap
metadata:
  name: flyte-admin-config-k7f4k7g76c
  namespace: flyte
---
apiVersion: v1
data:
  admin.yaml: |
    event:
      type: admin
      rate: 500
      capacity: 1000
    admin:
      endpoint: flyteadmin:81
      insecure: true
  catalog.yaml: |
    catalog-cache:
      endpoint: datacatalog:89
      type: datacatalog
      insecure: true
  copilot.yaml: |
    plugins:
      k8s:
        co-pilot:
          name: "flyte-copilot-"
          image: "ghcr.io/flyteorg/flytecopilot:v0.5.28"
          start-timeout: "30s"
  core.yaml: |
    propeller:
      rawoutput-prefix: s3://my-s3-bucket/
      leader-election:
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        enabled: true
        lease-duration: 15s
        renew-deadline: 10s
        retry-period: 2s
  enabled_plugins.yaml: |
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - k8s-array
        default-for-task-types:
          container: container
          sidecar: sidecar
          container_array: k8s-array
  k8s.yaml: |
    plugins:
      k8s:
        default-env-vars:
          - FLYTE_AWS_ENDPOINT: "http://minio.flyte:9000"
          - FLYTE_AWS_ACCESS_KEY_ID: minio
          - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
        default-cpus: 100m
        default-memory: 100Mi
  logger.yaml: |
    logger:
      show-source: true
      level: 2
  resource_manager.yaml: |
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: |+
    storage:
      type: minio
      connection:
        access-key: minio
        auth-type: accesskey
        secret-key: miniostorage
        disable-ssl: true
        endpoint: http://minio.flyte.svc.cluster.local:9000
        region: us-east-1
      container: "my-s3-bucket"

kind: ConfigMap
metadata:
  name: flyte-propeller-config-69cf96mm8f
  namespace: flyte
---
apiVersion: v1
data:
  pass.txt: YXdlc29tZXNhdWNl
kind: Secret
metadata:
  name: db-pass-9dgchhk2bm
  namespace: flyte
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    contour.heptio.com/upstream-protocol.h2c: grpc
  name: datacatalog
  namespace: flyte
spec:
  ports:
  - name: http
    port: 88
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 89
    protocol: TCP
    targetPort: 8089
  selector:
    app: datacatalog
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    projectcontour.io/upstream-protocol.h2c: grpc
  name: flyte-pod-webhook
  namespace: flyte
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    app: flyte-pod-webhook
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    projectcontour.io/upstream-protocol.h2c: grpc
  name: flyteadmin
  namespace: flyte
spec:
  ports:
  - name: redoc
    port: 87
    protocol: TCP
    targetPort: 8087
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 81
    protocol: TCP
    targetPort: 8089
  selector:
    app: flyteadmin
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: flyte
spec:
  externalName: minio
  ports:
  - port: 9000
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: flyte
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: datacatalog
  name: datacatalog
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datacatalog
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: datacatalog
        app.kubernetes.io/name: datacatalog
        app.kubernetes.io/version: 0.3.0
    spec:
      containers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - serve
        image: ghcr.io/flyteorg/datacatalog:v0.3.1
        imagePullPolicy: IfNotPresent
        name: datacatalog
        ports:
        - containerPort: 8088
        - containerPort: 8089
        volumeMounts:
        - mountPath: /etc/datacatalog/config
          name: config-volume
        - mountPath: /etc/db
          name: db-pass
      initContainers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - migrate
        - run
        image: ghcr.io/flyteorg/datacatalog:v0.3.1
        imagePullPolicy: IfNotPresent
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/datacatalog/config
          name: config-volume
        - mountPath: /etc/db
          name: db-pass
      serviceAccountName: datacatalog
      volumes:
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: datacatalog-config-64k8dg9gck
        name: config-volume
      - name: db-pass
        secret:
          secretName: db-pass-9dgchhk2bm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyte-pod-webhook
  name: flyte-pod-webhook
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: 0.5.13
    spec:
      containers:
      - args:
        - webhook
        - --config
        - /etc/flyte/config/*.yaml
        command:
        - flytepropeller
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: ghcr.io/flyteorg/flytepropeller:v0.10.0
        imagePullPolicy: IfNotPresent
        name: webhook
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
          readOnly: true
        - mountPath: /etc/webhook/certs
          name: webhook-certs
          readOnly: true
      serviceAccountName: flyte-pod-webhook
      volumes:
      - configMap:
          name: flyte-propeller-config-69cf96mm8f
        name: config-volume
      - name: webhook-certs
        secret:
          secretName: flyte-pod-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyteadmin
  name: flyteadmin
  namespace: flyte
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flyteadmin
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flyteadmin
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/version: 0.3.38
    spec:
      containers:
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - serve
        image: ghcr.io/flyteorg/flyteadmin:v0.4.7
        imagePullPolicy: IfNotPresent
        name: flyteadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        resources:
          limits:
            cpu: "0.1"
            ephemeral-storage: 100Mi
            memory: 200Mi
        volumeMounts:
        - mountPath: /srv/flyte
          name: shared-data
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/db
          name: db-pass
      - command:
        - sh
        - -c
        - ln -s /usr/share/nginx/html /usr/share/nginx/html/openapi && sh /usr/local/bin/docker-run.sh
        env:
        - name: PAGE_TITLE
          value: Flyte Admin OpenAPI
        - name: SPEC_URL
          value: /api/v1/openapi
        - name: PORT
          value: "8087"
        image: docker.io/redocly/redoc
        imagePullPolicy: IfNotPresent
        name: redoc
        ports:
        - containerPort: 8087
        resources:
          limits:
            cpu: "0.1"
            memory: 200Mi
      initContainers:
      - command:
        - sh
        - -c
        - until pg_isready -h postgres -p 5432; do echo waiting for database; sleep 2; done;
        image: postgres:10.16-alpine
        name: check-db-ready
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - migrate
        - run
        image: ghcr.io/flyteorg/flyteadmin:v0.4.7
        imagePullPolicy: IfNotPresent
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/db
          name: db-pass
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - migrate
        - seed-projects
        - flytetester
        - flytesnacks
        image: ghcr.io/flyteorg/flyteadmin:v0.4.7
        imagePullPolicy: IfNotPresent
        name: seed-projects
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/db
          name: db-pass
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - clusterresource
        - sync
        image: ghcr.io/flyteorg/flyteadmin:v0.4.7
        imagePullPolicy: IfNotPresent
        name: sync-cluster-resources
        volumeMounts:
        - mountPath: /etc/flyte/clusterresource/templates
          name: resource-templates
        - mountPath: /etc/flyte/config
          name: config-volume
        - mountPath: /etc/db
          name: db-pass
      serviceAccountName: flyteadmin
      volumes:
      - configMap:
          name: clusterresource-template-dtg8ff28mt
        name: resource-templates
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: flyte-admin-config-k7f4k7g76c
        name: config-volume
      - name: db-pass
        secret:
          secretName: db-pass-9dgchhk2bm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flytepropeller
  name: flytepropeller
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: flytepropeller
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: flytepropeller
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/version: 0.7.1
    spec:
      containers:
      - args:
        - --config
        - /etc/flyte/config/*.yaml
        command:
        - flytepropeller
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: ghcr.io/flyteorg/flytepropeller:v0.10.0
        imagePullPolicy: IfNotPresent
        name: flytepropeller
        ports:
        - containerPort: 10254
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config-69cf96mm8f
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - args:
        - server
        - /data
        env:
        - name: MINIO_ACCESS_KEY
          value: minio
        - name: MINIO_SECRET_KEY
          value: miniostorage
        image: minio/minio:RELEASE.2020-12-16T05-05-17Z
        name: minio
        ports:
        - containerPort: 9000
          name: minio
        volumeMounts:
        - mountPath: /data
          name: minio-storage
      volumes:
      - emptyDir: {}
        name: minio-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: flyte
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        image: postgres:10.16-alpine
        name: postgres
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
      volumes:
      - emptyDir: {}
        name: postgres-storage
---
apiVersion: batch/v1
kind: Job
metadata:
  name: flyte-pod-webhook-secret
  namespace: flyte
spec:
  backoffLimit: 3
  template:
    spec:
      containers:
      - args:
        - webhook
        - init-certs
        - --config
        - /etc/flyte/config/*.yaml
        command:
        - flytepropeller
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: ghcr.io/flyteorg/flytepropeller:v0.10.0
        imagePullPolicy: IfNotPresent
        name: webhook
        volumeMounts:
        - mountPath: /etc/flyte/config
          name: config-volume
      restartPolicy: Never
      serviceAccountName: flyte-pod-webhook
      volumes:
      - configMap:
          name: flyte-propeller-config-69cf96mm8f
        name: config-volume
  ttlSecondsAfterFinished: 0
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  name: minio
  namespace: flyte
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: minio
            port:
              number: 9000
        path: /minio
        pathType: ImplementationSpecific
